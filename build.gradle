plugins {
    id "org.springframework.boot" version "2.3.1.RELEASE"
    id "io.spring.dependency-management" version "1.0.9.RELEASE"
    id "java"
    id "org.sonarqube" version "3.0"
    id "jacoco"
}

group = "org.antop"
version = "1.0.0"
sourceCompatibility = "1.8"

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-websocket"
    compileOnly "org.projectlombok:lombok"
    developmentOnly "org.springframework.boot:spring-boot-devtools"
    runtimeOnly "com.h2database:h2"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    annotationProcessor "org.projectlombok:lombok"
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }
    testImplementation "org.springframework.security:spring-security-test"
    // https://docs.sentry.io/clients/java/integrations/#spring
    implementation "io.sentry:sentry-spring:1.7.30"
    // https://github.com/ulisesbocchio/jasypt-spring-boot/issues
    implementation "com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.3"
}

test {
    useJUnitPlatform()
}

sonarqube {
    properties {
        property "sonar.projectKey", "antop-dev_billiards-love"
        property "sonar.organization", "antop-dev-github"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.sources", "src/main/java,src/main/front"
//        property "sonar.tests", "src/test/java,src/test/front"
        property "sonar.tests", "src/test/java"
    }
}

jacoco {
    toolVersion "0.8.5"
}

test {
    // 이 테스크가 끝난 다음 수행할 테스크
    finalizedBy "jacocoTestReport"
}

jacocoTestReport {
    reports {
        html.enabled true
        xml.enabled true
    }
    finalizedBy "jacocoTestCoverageVerification"
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            // 룰을 체크할 단위는 클래스 단위
            element = "CLASS"
            // 브랜치 커버리지를 최소한 90% 만족시켜야 합니다.
            limit {
                counter = "BRANCH"
                value = "COVEREDRATIO"
                minimum = 0.90
            }
            // 라인 커버리지를 최소한 80% 만족시켜야 합니다.
            limit {
                counter = "LINE"
                value = "COVEREDRATIO"
                minimum = 0.80
            }
            // 커버리지 체크를 제외할 클래스들
            excludes = [
                    // generated by Querydsl
                    "*.Q*.class"
            ]
        }
    }
}
